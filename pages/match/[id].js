import { useState } from 'react';
import Head from 'next/head';
import styles from '../../styles/Match.module.css';
import { Row, Col, Avatar, Typography, Progress, Image, Form, Input, Button, Select, Statistic, notification } from 'antd';
import { DollarOutlined } from '@ant-design/icons';
import { useSelector } from 'react-redux';
import {server} from '../../config';

const { Paragraph } = Typography;
const { Option } = Select;
const { Countdown } = Statistic;

// const fixture = {
//   homeTeam: 'Nice',
//   homeLogo: 'https://media.api-sports.io/football/teams/84.png',
//   homeId: 84,
//   awayTeam: 'Lyon',
//   awayLogo: "https://media.api-sports.io/football/teams/80.png",
//   awayId: 80,
//   date: "2021-10-24T11:00:00+00:00",
//   homeChance: 10,
//   drawChance: 45,
//   awayChance: 45
// };

export default function Match({fixture}) {

  const [betsHomeTeam, setBetsHomeTeam] = useState(10);
  const [betsAwayTeam, setBetsAwayTeam] = useState(5);
  const [betsDraw, setBetsDraw] = useState(5);
  const [playerWin, setPlayerWin] = useState(0);

  const [form] = Form.useForm();
  const date = useSelector(state => state.date);

  const onBetClick = values => {
    console.log(values);
    let win;
    let message;
    if (values.team === "home") {
      setBetsHomeTeam(betsHomeTeam + Number(values.bet));
      win = Number(values.bet) + (Number(values.bet) / (betsHomeTeam + Number(values.bet)) * (betsAwayTeam + betsDraw));
      message = `You win ${win.toFixed(4)} ETH if ${fixture.homeTeam} win !`
    } else if (values.team === "away") {
      setBetsAwayTeam(betsAwayTeam + Number(values.bet));
      win = Number(values.bet) + (Number(values.bet) / (betsAwayTeam + Number(values.bet)) * (betsHomeTeam + betsDraw));
      message = `You win ${win.toFixed(4)} ETH if ${fixture.awayTeam} win !`
    } else {
      setBetsDraw(betsDraw + Number(values.bet));
      win = Number(values.bet) + (Number(values.bet) / (betsDraw + Number(values.bet)) * (betsHomeTeam + betsAwayTeam));
      message = `You win ${win.toFixed(4)} ETH if it will be a draw !`;
    };
    if (values) {
      notification['success']({
        message: 'Thanks for your bet',
        description: message
      })
      form.resetFields();
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Crypto-Bet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>It's time to bet !</h1>
      <div className={styles.row}>
        <Image src={fixture.homeLogo} width={80} />
        <Paragraph style={{ fontSize: 25 }}>VS</Paragraph>
        <Image src={fixture.awayLogo} width={80} />
      </div>
      <div className={styles.row}>
        <div className={styles.prediction}>
          <Paragraph>Chances of victory</Paragraph>
          <Progress type="circle" percent={fixture.homeChance} width={80} />
        </div>
        <div className={styles.prediction}>
          <Paragraph>Chances of draw</Paragraph>
          <Progress type="circle" percent={fixture.drawChance} width={80} />
        </div>
        <div className={styles.prediction}>
          <Paragraph>Chances of victory</Paragraph>
          <Progress type="circle" percent={fixture.awayChance} width={80} />
        </div>
      </div>
      <Form form={form} layout="inline" onFinish={onBetClick} className={styles.form}>
        <Form.Item
          name="team"
          rules={[
            { required: true, message: 'Please select a result' }
          ]}
        >
          <Select defaultValue="The winner will be :" style={{ width: 180 }}>
            <Option value="home">{fixture.homeTeam}</Option>
            <Option value="away">{fixture.awayTeam}</Option>
            <Option value="draw">Nobody (draw)</Option>
          </Select>
        </Form.Item>
        <Form.Item
          name="bet"
          rules={[
            { required: true, message: 'Your bet is required' },
            () => ({
              validator(_, value) {
                if (!value) {
                  return Promise.reject();
                }
                if (isNaN(value)) {
                  return Promise.reject("Your bet has to be a number.");
                }
                if (value < 0.0001) {
                  return Promise.reject('Min. bet required: 0.0001 ETH.');
                }
                return Promise.resolve();
              }
            }),
          ]}
        >
          <Input type="number" placeholder="0.0001 ETH" />
        </Form.Item>
        <Form.Item>
          <Button type="primary" htmlType="submit" icon={<DollarOutlined />}>BET</Button>
        </Form.Item>
      </Form>
      <div className={styles.row}>
        <Statistic title={`Total bet on ${fixture.homeTeam}`} value={`${betsHomeTeam.toFixed(4)} ETH`} />
        <Statistic title={`Total bet on ${fixture.awayTeam}`} value={`${betsAwayTeam.toFixed(4)} ETH`} />
        <Statistic title='Total bet on a draw' value={`${betsDraw.toFixed(4)} ETH`} />
        <Countdown title="Time left to bet" value={date} format="DD:HH:mm:ss" />
      </div>
    </div>
  )
};

export async function getServerSideProps({params}){
  const request = await fetch(`${server}/api/prediction?matchId=${params.id}`);
  const response = await request.json();
  return {
    props: {fixture: response.fixture}
  }
}
